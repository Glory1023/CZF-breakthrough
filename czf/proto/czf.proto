syntax = "proto3";

package czf.pb;

// a message to heartbeat
message Heartbeat {}

// a message to identify the resource of a node
message Node {
  // unique identity
  string identity = 1;
  // hostname (may be duplicated)
  string hostname = 2;
}

// a message for model identity
message ModelInfo {
  // model name
  string name = 1;
  // model version
  int32 version = 2;
}

// a message to transfer model
message Model {
  // model identity
  ModelInfo info = 1;
  // list of model binary
  repeated bytes blobs = 2;
}

// a message of the state of a worker
message WorkerState {
  // a message for evaluation configs (Actor)
  message EvaluationConfig {
    int32 simulation_count = 1;
    float tree_min_value = 2;
    float tree_max_value = 3;
    float C_PUCT = 4;
    float dirichlet_alpha = 5;
    float dirichlet_epsilon = 6;
    float discount = 7;
  }
  // a message for an evaluation result (Actor)
  message Evaluation {
    // root forward value
    float value = 1;
    // MCTS root policy (used to determine action)
    repeated float policy = 2;
    // MCTS root children's average value
    float average_value = 3;
  }
  // a message for a game transition (GameServer)
  message Transition {
    // current player to play
    int32 current_player = 1;
    // action applied in the game
    int32 action = 2;
    // immediate rewards after applying the action
    repeated float rewards = 3;
  }
  // unordered legal actions
  repeated int32 legal_actions = 1;
  // flatten observation tensor
  repeated float observation_tensor = 2;
  // serialized game state (only used by AlphaZero)
  string serialize = 3;
  // evaluation result
  Evaluation evaluation = 4;
  // game transition
  Transition transition = 5;
}

// a general Job message
message Job {
  // operation types for a job
  enum Operation {
    UNKNOWN = 0;           // Unknown
    ALPHAZERO_SEARCH = 1;  // AlphaZero Search
    MUZERO_SEARCH = 2;     // MuZero Search
  }
  message Payload {
    int32 env_index = 1;
    WorkerState state = 2;
  }
  // unique identity
  string identity = 1;
  // game_server
  Node initiator = 2;
  // the model used for the job
  ModelInfo model = 3;
  // all operations for the job
  repeated Operation procedure = 4;
  // current index of operations for the job
  int32 step = 5;
  // all workers that has handled the job
  repeated Node workers = 6;
  Payload payload = 7;
}

// a message to request for job
message JobRequest {
  Job.Operation operation = 1;
  int32 capacity = 2;
}

// a collection of Job messages
message JobBatch { repeated Job jobs = 1; }

// a collection of sequential states
message Trajectory { repeated WorkerState states = 1; }

// a collection of Trajectory messages
message TrajectoryBatch { repeated Trajectory trajectories = 1; }

// a general Packet message
message Packet {
  // with one of the following payload
  oneof payload {
    Heartbeat heartbeat = 1;
    ModelInfo model_info = 2;
    ModelInfo model_request = 3;
    Model model_response = 4;
    JobRequest job_request = 5;
    JobBatch job_batch = 6;
    Job job = 7;
    TrajectoryBatch trajectory_batch = 8;
  }
}
