// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: czf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "czf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MCTSRoot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MCTSRoot_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameOrigin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameOrigin_reflection_ = NULL;
const ::google::protobuf::Descriptor* Model_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Model_reflection_ = NULL;
const ::google::protobuf::Descriptor* Heartbeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Heartbeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PreprocessRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PreprocessRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Trajectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trajectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_reflection_ = NULL;
struct PacketOneofInstance {
  const ::Heartbeat* heartbeat_;
  const ::JobRequest* job_request_;
  const ::PreprocessRequest* preprocess_request_;
  const ::SearchRequest* search_request_;
  const ::SearchResponse* search_response_;
  const ::Model* model_;
  const ::Trajectory* trajectory_;
}* Packet_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* JobType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_czf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_czf_2eproto() {
  protobuf_AddDesc_czf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "czf.proto");
  GOOGLE_CHECK(file != NULL);
  MCTSRoot_descriptor_ = file->message_type(0);
  static const int MCTSRoot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCTSRoot, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCTSRoot, policy_),
  };
  MCTSRoot_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MCTSRoot_descriptor_,
      MCTSRoot::default_instance_,
      MCTSRoot_offsets_,
      -1,
      -1,
      -1,
      sizeof(MCTSRoot),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCTSRoot, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCTSRoot, _is_default_instance_));
  GameOrigin_descriptor_ = file->message_type(1);
  static const int GameOrigin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOrigin, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOrigin, index_),
  };
  GameOrigin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameOrigin_descriptor_,
      GameOrigin::default_instance_,
      GameOrigin_offsets_,
      -1,
      -1,
      -1,
      sizeof(GameOrigin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOrigin, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOrigin, _is_default_instance_));
  Model_descriptor_ = file->message_type(2);
  static const int Model_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, blobs_),
  };
  Model_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Model_descriptor_,
      Model::default_instance_,
      Model_offsets_,
      -1,
      -1,
      -1,
      sizeof(Model),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, _is_default_instance_));
  Heartbeat_descriptor_ = file->message_type(3);
  static const int Heartbeat_offsets_[1] = {
  };
  Heartbeat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Heartbeat_descriptor_,
      Heartbeat::default_instance_,
      Heartbeat_offsets_,
      -1,
      -1,
      -1,
      sizeof(Heartbeat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat, _is_default_instance_));
  JobRequest_descriptor_ = file->message_type(4);
  static const int JobRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobRequest, job_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobRequest, vacancy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobRequest, efficiency_),
  };
  JobRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JobRequest_descriptor_,
      JobRequest::default_instance_,
      JobRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(JobRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobRequest, _is_default_instance_));
  PreprocessRequest_descriptor_ = file->message_type(5);
  static const int PreprocessRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessRequest, game_origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessRequest, observation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessRequest, legal_actions_),
  };
  PreprocessRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PreprocessRequest_descriptor_,
      PreprocessRequest::default_instance_,
      PreprocessRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PreprocessRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessRequest, _is_default_instance_));
  SearchRequest_descriptor_ = file->message_type(6);
  static const int SearchRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, game_origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, legal_actions_),
  };
  SearchRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchRequest_descriptor_,
      SearchRequest::default_instance_,
      SearchRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, _is_default_instance_));
  SearchResponse_descriptor_ = file->message_type(7);
  static const int SearchResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, game_origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, mcts_roots_),
  };
  SearchResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchResponse_descriptor_,
      SearchResponse::default_instance_,
      SearchResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, _is_default_instance_));
  Trajectory_descriptor_ = file->message_type(8);
  static const int Trajectory_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, actions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, mcts_roots_),
  };
  Trajectory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Trajectory_descriptor_,
      Trajectory::default_instance_,
      Trajectory_offsets_,
      -1,
      -1,
      -1,
      sizeof(Trajectory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _is_default_instance_));
  Packet_descriptor_ = file->message_type(9);
  static const int Packet_offsets_[8] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Packet_default_oneof_instance_, heartbeat_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Packet_default_oneof_instance_, job_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Packet_default_oneof_instance_, preprocess_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Packet_default_oneof_instance_, search_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Packet_default_oneof_instance_, search_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Packet_default_oneof_instance_, model_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Packet_default_oneof_instance_, trajectory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, payload_),
  };
  Packet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Packet_descriptor_,
      Packet::default_instance_,
      Packet_offsets_,
      -1,
      -1,
      -1,
      Packet_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _oneof_case_[0]),
      sizeof(Packet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _is_default_instance_));
  JobType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_czf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MCTSRoot_descriptor_, &MCTSRoot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameOrigin_descriptor_, &GameOrigin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Model_descriptor_, &Model::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Heartbeat_descriptor_, &Heartbeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JobRequest_descriptor_, &JobRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PreprocessRequest_descriptor_, &PreprocessRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchRequest_descriptor_, &SearchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchResponse_descriptor_, &SearchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Trajectory_descriptor_, &Trajectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Packet_descriptor_, &Packet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_czf_2eproto() {
  delete MCTSRoot::default_instance_;
  delete MCTSRoot_reflection_;
  delete GameOrigin::default_instance_;
  delete GameOrigin_reflection_;
  delete Model::default_instance_;
  delete Model_reflection_;
  delete Heartbeat::default_instance_;
  delete Heartbeat_reflection_;
  delete JobRequest::default_instance_;
  delete JobRequest_reflection_;
  delete PreprocessRequest::default_instance_;
  delete PreprocessRequest_reflection_;
  delete SearchRequest::default_instance_;
  delete SearchRequest_reflection_;
  delete SearchResponse::default_instance_;
  delete SearchResponse_reflection_;
  delete Trajectory::default_instance_;
  delete Trajectory_reflection_;
  delete Packet::default_instance_;
  delete Packet_default_oneof_instance_;
  delete Packet_reflection_;
}

void protobuf_AddDesc_czf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_czf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tczf.proto\")\n\010MCTSRoot\022\r\n\005value\030\001 \001(\002\022\016"
    "\n\006policy\030\002 \003(\002\")\n\nGameOrigin\022\014\n\004node\030\001 \001"
    "(\014\022\r\n\005index\030\002 \001(\005\"\026\n\005Model\022\r\n\005blobs\030\002 \003("
    "\014\"\013\n\tHeartbeat\"M\n\nJobRequest\022\032\n\010job_type"
    "\030\001 \001(\0162\010.JobType\022\017\n\007vacancy\030\002 \001(\005\022\022\n\neff"
    "iciency\030\003 \001(\002\"a\n\021PreprocessRequest\022 \n\013ga"
    "me_origin\030\001 \001(\0132\013.GameOrigin\022\023\n\013observat"
    "ion\030\002 \001(\014\022\025\n\rlegal_actions\030\003 \003(\005\"W\n\rSear"
    "chRequest\022 \n\013game_origin\030\001 \001(\0132\013.GameOri"
    "gin\022\r\n\005state\030\002 \001(\014\022\025\n\rlegal_actions\030\003 \003("
    "\005\"Q\n\016SearchResponse\022 \n\013game_origin\030\001 \001(\013"
    "2\013.GameOrigin\022\035\n\nmcts_roots\030\002 \003(\0132\t.MCTS"
    "Root\"M\n\nTrajectory\022\017\n\007actions\030\001 \003(\005\022\017\n\007r"
    "ewards\030\002 \003(\002\022\035\n\nmcts_roots\030\003 \003(\0132\t.MCTSR"
    "oot\"\234\002\n\006Packet\022\037\n\theartbeat\030\001 \001(\0132\n.Hear"
    "tbeatH\000\022\"\n\013job_request\030\002 \001(\0132\013.JobReques"
    "tH\000\0220\n\022preprocess_request\030\003 \001(\0132\022.Prepro"
    "cessRequestH\000\022(\n\016search_request\030\004 \001(\0132\016."
    "SearchRequestH\000\022*\n\017search_response\030\005 \001(\013"
    "2\017.SearchResponseH\000\022\027\n\005model\030\006 \001(\0132\006.Mod"
    "elH\000\022!\n\ntrajectory\030\007 \001(\0132\013.TrajectoryH\000B"
    "\t\n\007payload*2\n\007JobType\022\013\n\007UNKNOWN\020\000\022\016\n\nPR"
    "EPROCESS\020\001\022\n\n\006SEARCH\020\002b\006proto3", 910);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "czf.proto", &protobuf_RegisterTypes);
  MCTSRoot::default_instance_ = new MCTSRoot();
  GameOrigin::default_instance_ = new GameOrigin();
  Model::default_instance_ = new Model();
  Heartbeat::default_instance_ = new Heartbeat();
  JobRequest::default_instance_ = new JobRequest();
  PreprocessRequest::default_instance_ = new PreprocessRequest();
  SearchRequest::default_instance_ = new SearchRequest();
  SearchResponse::default_instance_ = new SearchResponse();
  Trajectory::default_instance_ = new Trajectory();
  Packet::default_instance_ = new Packet();
  Packet_default_oneof_instance_ = new PacketOneofInstance();
  MCTSRoot::default_instance_->InitAsDefaultInstance();
  GameOrigin::default_instance_->InitAsDefaultInstance();
  Model::default_instance_->InitAsDefaultInstance();
  Heartbeat::default_instance_->InitAsDefaultInstance();
  JobRequest::default_instance_->InitAsDefaultInstance();
  PreprocessRequest::default_instance_->InitAsDefaultInstance();
  SearchRequest::default_instance_->InitAsDefaultInstance();
  SearchResponse::default_instance_->InitAsDefaultInstance();
  Trajectory::default_instance_->InitAsDefaultInstance();
  Packet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_czf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_czf_2eproto {
  StaticDescriptorInitializer_czf_2eproto() {
    protobuf_AddDesc_czf_2eproto();
  }
} static_descriptor_initializer_czf_2eproto_;
const ::google::protobuf::EnumDescriptor* JobType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobType_descriptor_;
}
bool JobType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MCTSRoot::kValueFieldNumber;
const int MCTSRoot::kPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MCTSRoot::MCTSRoot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MCTSRoot)
}

void MCTSRoot::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MCTSRoot::MCTSRoot(const MCTSRoot& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MCTSRoot)
}

void MCTSRoot::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = 0;
}

MCTSRoot::~MCTSRoot() {
  // @@protoc_insertion_point(destructor:MCTSRoot)
  SharedDtor();
}

void MCTSRoot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MCTSRoot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MCTSRoot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MCTSRoot_descriptor_;
}

const MCTSRoot& MCTSRoot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_czf_2eproto();
  return *default_instance_;
}

MCTSRoot* MCTSRoot::default_instance_ = NULL;

MCTSRoot* MCTSRoot::New(::google::protobuf::Arena* arena) const {
  MCTSRoot* n = new MCTSRoot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MCTSRoot::Clear() {
// @@protoc_insertion_point(message_clear_start:MCTSRoot)
  value_ = 0;
  policy_.Clear();
}

bool MCTSRoot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MCTSRoot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float value = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_policy;
        break;
      }

      // repeated float policy = 2;
      case 2: {
        if (tag == 18) {
         parse_policy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_policy())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_policy())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MCTSRoot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MCTSRoot)
  return false;
#undef DO_
}

void MCTSRoot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MCTSRoot)
  // optional float value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->value(), output);
  }

  // repeated float policy = 2;
  if (this->policy_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_policy_cached_byte_size_);
  }
  for (int i = 0; i < this->policy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->policy(i), output);
  }

  // @@protoc_insertion_point(serialize_end:MCTSRoot)
}

::google::protobuf::uint8* MCTSRoot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MCTSRoot)
  // optional float value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->value(), target);
  }

  // repeated float policy = 2;
  if (this->policy_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _policy_cached_byte_size_, target);
  }
  for (int i = 0; i < this->policy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->policy(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MCTSRoot)
  return target;
}

int MCTSRoot::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MCTSRoot)
  int total_size = 0;

  // optional float value = 1;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  // repeated float policy = 2;
  {
    int data_size = 0;
    data_size = 4 * this->policy_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _policy_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MCTSRoot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MCTSRoot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MCTSRoot* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MCTSRoot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MCTSRoot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MCTSRoot)
    MergeFrom(*source);
  }
}

void MCTSRoot::MergeFrom(const MCTSRoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MCTSRoot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  policy_.MergeFrom(from.policy_);
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void MCTSRoot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MCTSRoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MCTSRoot::CopyFrom(const MCTSRoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MCTSRoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MCTSRoot::IsInitialized() const {

  return true;
}

void MCTSRoot::Swap(MCTSRoot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MCTSRoot::InternalSwap(MCTSRoot* other) {
  std::swap(value_, other->value_);
  policy_.UnsafeArenaSwap(&other->policy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MCTSRoot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MCTSRoot_descriptor_;
  metadata.reflection = MCTSRoot_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MCTSRoot

// optional float value = 1;
void MCTSRoot::clear_value() {
  value_ = 0;
}
 float MCTSRoot::value() const {
  // @@protoc_insertion_point(field_get:MCTSRoot.value)
  return value_;
}
 void MCTSRoot::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:MCTSRoot.value)
}

// repeated float policy = 2;
int MCTSRoot::policy_size() const {
  return policy_.size();
}
void MCTSRoot::clear_policy() {
  policy_.Clear();
}
 float MCTSRoot::policy(int index) const {
  // @@protoc_insertion_point(field_get:MCTSRoot.policy)
  return policy_.Get(index);
}
 void MCTSRoot::set_policy(int index, float value) {
  policy_.Set(index, value);
  // @@protoc_insertion_point(field_set:MCTSRoot.policy)
}
 void MCTSRoot::add_policy(float value) {
  policy_.Add(value);
  // @@protoc_insertion_point(field_add:MCTSRoot.policy)
}
 const ::google::protobuf::RepeatedField< float >&
MCTSRoot::policy() const {
  // @@protoc_insertion_point(field_list:MCTSRoot.policy)
  return policy_;
}
 ::google::protobuf::RepeatedField< float >*
MCTSRoot::mutable_policy() {
  // @@protoc_insertion_point(field_mutable_list:MCTSRoot.policy)
  return &policy_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameOrigin::kNodeFieldNumber;
const int GameOrigin::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameOrigin::GameOrigin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameOrigin)
}

void GameOrigin::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GameOrigin::GameOrigin(const GameOrigin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameOrigin)
}

void GameOrigin::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0;
}

GameOrigin::~GameOrigin() {
  // @@protoc_insertion_point(destructor:GameOrigin)
  SharedDtor();
}

void GameOrigin::SharedDtor() {
  node_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GameOrigin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameOrigin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameOrigin_descriptor_;
}

const GameOrigin& GameOrigin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_czf_2eproto();
  return *default_instance_;
}

GameOrigin* GameOrigin::default_instance_ = NULL;

GameOrigin* GameOrigin::New(::google::protobuf::Arena* arena) const {
  GameOrigin* n = new GameOrigin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameOrigin::Clear() {
// @@protoc_insertion_point(message_clear_start:GameOrigin)
  node_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0;
}

bool GameOrigin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameOrigin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes node = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameOrigin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameOrigin)
  return false;
#undef DO_
}

void GameOrigin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameOrigin)
  // optional bytes node = 1;
  if (this->node().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->node(), output);
  }

  // optional int32 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // @@protoc_insertion_point(serialize_end:GameOrigin)
}

::google::protobuf::uint8* GameOrigin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameOrigin)
  // optional bytes node = 1;
  if (this->node().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->node(), target);
  }

  // optional int32 index = 2;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GameOrigin)
  return target;
}

int GameOrigin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameOrigin)
  int total_size = 0;

  // optional bytes node = 1;
  if (this->node().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->node());
  }

  // optional int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameOrigin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameOrigin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GameOrigin* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameOrigin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameOrigin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameOrigin)
    MergeFrom(*source);
  }
}

void GameOrigin::MergeFrom(const GameOrigin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameOrigin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.node().size() > 0) {

    node_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void GameOrigin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameOrigin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOrigin::CopyFrom(const GameOrigin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameOrigin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOrigin::IsInitialized() const {

  return true;
}

void GameOrigin::Swap(GameOrigin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameOrigin::InternalSwap(GameOrigin* other) {
  node_.Swap(&other->node_);
  std::swap(index_, other->index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameOrigin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameOrigin_descriptor_;
  metadata.reflection = GameOrigin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameOrigin

// optional bytes node = 1;
void GameOrigin::clear_node() {
  node_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GameOrigin::node() const {
  // @@protoc_insertion_point(field_get:GameOrigin.node)
  return node_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameOrigin::set_node(const ::std::string& value) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameOrigin.node)
}
 void GameOrigin::set_node(const char* value) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameOrigin.node)
}
 void GameOrigin::set_node(const void* value, size_t size) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameOrigin.node)
}
 ::std::string* GameOrigin::mutable_node() {
  
  // @@protoc_insertion_point(field_mutable:GameOrigin.node)
  return node_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GameOrigin::release_node() {
  // @@protoc_insertion_point(field_release:GameOrigin.node)
  
  return node_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameOrigin::set_allocated_node(::std::string* node) {
  if (node != NULL) {
    
  } else {
    
  }
  node_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node);
  // @@protoc_insertion_point(field_set_allocated:GameOrigin.node)
}

// optional int32 index = 2;
void GameOrigin::clear_index() {
  index_ = 0;
}
 ::google::protobuf::int32 GameOrigin::index() const {
  // @@protoc_insertion_point(field_get:GameOrigin.index)
  return index_;
}
 void GameOrigin::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:GameOrigin.index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Model::kBlobsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Model::Model()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Model)
}

void Model::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Model::Model(const Model& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Model)
}

void Model::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:Model)
  SharedDtor();
}

void Model::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Model::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Model::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Model_descriptor_;
}

const Model& Model::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_czf_2eproto();
  return *default_instance_;
}

Model* Model::default_instance_ = NULL;

Model* Model::New(::google::protobuf::Arena* arena) const {
  Model* n = new Model;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Model::Clear() {
// @@protoc_insertion_point(message_clear_start:Model)
  blobs_.Clear();
}

bool Model::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Model)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes blobs = 2;
      case 2: {
        if (tag == 18) {
         parse_blobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_blobs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_blobs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Model)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Model)
  return false;
#undef DO_
}

void Model::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Model)
  // repeated bytes blobs = 2;
  for (int i = 0; i < this->blobs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->blobs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Model)
}

::google::protobuf::uint8* Model::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Model)
  // repeated bytes blobs = 2;
  for (int i = 0; i < this->blobs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->blobs(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Model)
  return target;
}

int Model::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Model)
  int total_size = 0;

  // repeated bytes blobs = 2;
  total_size += 1 * this->blobs_size();
  for (int i = 0; i < this->blobs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->blobs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Model::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Model)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Model* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Model>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Model)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Model)
    MergeFrom(*source);
  }
}

void Model::MergeFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Model)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  blobs_.MergeFrom(from.blobs_);
}

void Model::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Model::CopyFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {

  return true;
}

void Model::Swap(Model* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Model::InternalSwap(Model* other) {
  blobs_.UnsafeArenaSwap(&other->blobs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Model::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Model_descriptor_;
  metadata.reflection = Model_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Model

// repeated bytes blobs = 2;
int Model::blobs_size() const {
  return blobs_.size();
}
void Model::clear_blobs() {
  blobs_.Clear();
}
 const ::std::string& Model::blobs(int index) const {
  // @@protoc_insertion_point(field_get:Model.blobs)
  return blobs_.Get(index);
}
 ::std::string* Model::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:Model.blobs)
  return blobs_.Mutable(index);
}
 void Model::set_blobs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Model.blobs)
  blobs_.Mutable(index)->assign(value);
}
 void Model::set_blobs(int index, const char* value) {
  blobs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Model.blobs)
}
 void Model::set_blobs(int index, const void* value, size_t size) {
  blobs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Model.blobs)
}
 ::std::string* Model::add_blobs() {
  // @@protoc_insertion_point(field_add_mutable:Model.blobs)
  return blobs_.Add();
}
 void Model::add_blobs(const ::std::string& value) {
  blobs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Model.blobs)
}
 void Model::add_blobs(const char* value) {
  blobs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Model.blobs)
}
 void Model::add_blobs(const void* value, size_t size) {
  blobs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Model.blobs)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Model::blobs() const {
  // @@protoc_insertion_point(field_list:Model.blobs)
  return blobs_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Model::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:Model.blobs)
  return &blobs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Heartbeat::Heartbeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Heartbeat)
}

void Heartbeat::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Heartbeat::Heartbeat(const Heartbeat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Heartbeat)
}

void Heartbeat::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:Heartbeat)
  SharedDtor();
}

void Heartbeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Heartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Heartbeat_descriptor_;
}

const Heartbeat& Heartbeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_czf_2eproto();
  return *default_instance_;
}

Heartbeat* Heartbeat::default_instance_ = NULL;

Heartbeat* Heartbeat::New(::google::protobuf::Arena* arena) const {
  Heartbeat* n = new Heartbeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:Heartbeat)
}

bool Heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Heartbeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:Heartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Heartbeat)
  return false;
#undef DO_
}

void Heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Heartbeat)
  // @@protoc_insertion_point(serialize_end:Heartbeat)
}

::google::protobuf::uint8* Heartbeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Heartbeat)
  // @@protoc_insertion_point(serialize_to_array_end:Heartbeat)
  return target;
}

int Heartbeat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Heartbeat)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Heartbeat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Heartbeat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Heartbeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Heartbeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Heartbeat)
    MergeFrom(*source);
  }
}

void Heartbeat::MergeFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Heartbeat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void Heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {

  return true;
}

void Heartbeat::Swap(Heartbeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Heartbeat::InternalSwap(Heartbeat* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Heartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Heartbeat_descriptor_;
  metadata.reflection = Heartbeat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Heartbeat

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobRequest::kJobTypeFieldNumber;
const int JobRequest::kVacancyFieldNumber;
const int JobRequest::kEfficiencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobRequest::JobRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JobRequest)
}

void JobRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

JobRequest::JobRequest(const JobRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:JobRequest)
}

void JobRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  job_type_ = 0;
  vacancy_ = 0;
  efficiency_ = 0;
}

JobRequest::~JobRequest() {
  // @@protoc_insertion_point(destructor:JobRequest)
  SharedDtor();
}

void JobRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JobRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobRequest_descriptor_;
}

const JobRequest& JobRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_czf_2eproto();
  return *default_instance_;
}

JobRequest* JobRequest::default_instance_ = NULL;

JobRequest* JobRequest::New(::google::protobuf::Arena* arena) const {
  JobRequest* n = new JobRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:JobRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(JobRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<JobRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(job_type_, efficiency_);

#undef ZR_HELPER_
#undef ZR_

}

bool JobRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:JobRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .JobType job_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_job_type(static_cast< ::JobType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_vacancy;
        break;
      }

      // optional int32 vacancy = 2;
      case 2: {
        if (tag == 16) {
         parse_vacancy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vacancy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_efficiency;
        break;
      }

      // optional float efficiency = 3;
      case 3: {
        if (tag == 29) {
         parse_efficiency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &efficiency_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JobRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JobRequest)
  return false;
#undef DO_
}

void JobRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JobRequest)
  // optional .JobType job_type = 1;
  if (this->job_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->job_type(), output);
  }

  // optional int32 vacancy = 2;
  if (this->vacancy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vacancy(), output);
  }

  // optional float efficiency = 3;
  if (this->efficiency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->efficiency(), output);
  }

  // @@protoc_insertion_point(serialize_end:JobRequest)
}

::google::protobuf::uint8* JobRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JobRequest)
  // optional .JobType job_type = 1;
  if (this->job_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->job_type(), target);
  }

  // optional int32 vacancy = 2;
  if (this->vacancy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vacancy(), target);
  }

  // optional float efficiency = 3;
  if (this->efficiency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->efficiency(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:JobRequest)
  return target;
}

int JobRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:JobRequest)
  int total_size = 0;

  // optional .JobType job_type = 1;
  if (this->job_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_type());
  }

  // optional int32 vacancy = 2;
  if (this->vacancy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vacancy());
  }

  // optional float efficiency = 3;
  if (this->efficiency() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JobRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const JobRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const JobRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JobRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JobRequest)
    MergeFrom(*source);
  }
}

void JobRequest::MergeFrom(const JobRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JobRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.job_type() != 0) {
    set_job_type(from.job_type());
  }
  if (from.vacancy() != 0) {
    set_vacancy(from.vacancy());
  }
  if (from.efficiency() != 0) {
    set_efficiency(from.efficiency());
  }
}

void JobRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobRequest::CopyFrom(const JobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobRequest::IsInitialized() const {

  return true;
}

void JobRequest::Swap(JobRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobRequest::InternalSwap(JobRequest* other) {
  std::swap(job_type_, other->job_type_);
  std::swap(vacancy_, other->vacancy_);
  std::swap(efficiency_, other->efficiency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobRequest_descriptor_;
  metadata.reflection = JobRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobRequest

// optional .JobType job_type = 1;
void JobRequest::clear_job_type() {
  job_type_ = 0;
}
 ::JobType JobRequest::job_type() const {
  // @@protoc_insertion_point(field_get:JobRequest.job_type)
  return static_cast< ::JobType >(job_type_);
}
 void JobRequest::set_job_type(::JobType value) {
  
  job_type_ = value;
  // @@protoc_insertion_point(field_set:JobRequest.job_type)
}

// optional int32 vacancy = 2;
void JobRequest::clear_vacancy() {
  vacancy_ = 0;
}
 ::google::protobuf::int32 JobRequest::vacancy() const {
  // @@protoc_insertion_point(field_get:JobRequest.vacancy)
  return vacancy_;
}
 void JobRequest::set_vacancy(::google::protobuf::int32 value) {
  
  vacancy_ = value;
  // @@protoc_insertion_point(field_set:JobRequest.vacancy)
}

// optional float efficiency = 3;
void JobRequest::clear_efficiency() {
  efficiency_ = 0;
}
 float JobRequest::efficiency() const {
  // @@protoc_insertion_point(field_get:JobRequest.efficiency)
  return efficiency_;
}
 void JobRequest::set_efficiency(float value) {
  
  efficiency_ = value;
  // @@protoc_insertion_point(field_set:JobRequest.efficiency)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PreprocessRequest::kGameOriginFieldNumber;
const int PreprocessRequest::kObservationFieldNumber;
const int PreprocessRequest::kLegalActionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PreprocessRequest::PreprocessRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PreprocessRequest)
}

void PreprocessRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  game_origin_ = const_cast< ::GameOrigin*>(&::GameOrigin::default_instance());
}

PreprocessRequest::PreprocessRequest(const PreprocessRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PreprocessRequest)
}

void PreprocessRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  game_origin_ = NULL;
  observation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PreprocessRequest::~PreprocessRequest() {
  // @@protoc_insertion_point(destructor:PreprocessRequest)
  SharedDtor();
}

void PreprocessRequest::SharedDtor() {
  observation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete game_origin_;
  }
}

void PreprocessRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreprocessRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PreprocessRequest_descriptor_;
}

const PreprocessRequest& PreprocessRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_czf_2eproto();
  return *default_instance_;
}

PreprocessRequest* PreprocessRequest::default_instance_ = NULL;

PreprocessRequest* PreprocessRequest::New(::google::protobuf::Arena* arena) const {
  PreprocessRequest* n = new PreprocessRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PreprocessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PreprocessRequest)
  if (GetArenaNoVirtual() == NULL && game_origin_ != NULL) delete game_origin_;
  game_origin_ = NULL;
  observation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  legal_actions_.Clear();
}

bool PreprocessRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PreprocessRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GameOrigin game_origin = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_observation;
        break;
      }

      // optional bytes observation = 2;
      case 2: {
        if (tag == 18) {
         parse_observation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_observation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_legal_actions;
        break;
      }

      // repeated int32 legal_actions = 3;
      case 3: {
        if (tag == 26) {
         parse_legal_actions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_legal_actions())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_legal_actions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PreprocessRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PreprocessRequest)
  return false;
#undef DO_
}

void PreprocessRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PreprocessRequest)
  // optional .GameOrigin game_origin = 1;
  if (this->has_game_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->game_origin_, output);
  }

  // optional bytes observation = 2;
  if (this->observation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->observation(), output);
  }

  // repeated int32 legal_actions = 3;
  if (this->legal_actions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_legal_actions_cached_byte_size_);
  }
  for (int i = 0; i < this->legal_actions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->legal_actions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:PreprocessRequest)
}

::google::protobuf::uint8* PreprocessRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PreprocessRequest)
  // optional .GameOrigin game_origin = 1;
  if (this->has_game_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->game_origin_, false, target);
  }

  // optional bytes observation = 2;
  if (this->observation().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->observation(), target);
  }

  // repeated int32 legal_actions = 3;
  if (this->legal_actions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _legal_actions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->legal_actions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->legal_actions(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PreprocessRequest)
  return target;
}

int PreprocessRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PreprocessRequest)
  int total_size = 0;

  // optional .GameOrigin game_origin = 1;
  if (this->has_game_origin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->game_origin_);
  }

  // optional bytes observation = 2;
  if (this->observation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->observation());
  }

  // repeated int32 legal_actions = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->legal_actions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->legal_actions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _legal_actions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreprocessRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PreprocessRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PreprocessRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PreprocessRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PreprocessRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PreprocessRequest)
    MergeFrom(*source);
  }
}

void PreprocessRequest::MergeFrom(const PreprocessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PreprocessRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  legal_actions_.MergeFrom(from.legal_actions_);
  if (from.has_game_origin()) {
    mutable_game_origin()->::GameOrigin::MergeFrom(from.game_origin());
  }
  if (from.observation().size() > 0) {

    observation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.observation_);
  }
}

void PreprocessRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PreprocessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreprocessRequest::CopyFrom(const PreprocessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PreprocessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreprocessRequest::IsInitialized() const {

  return true;
}

void PreprocessRequest::Swap(PreprocessRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PreprocessRequest::InternalSwap(PreprocessRequest* other) {
  std::swap(game_origin_, other->game_origin_);
  observation_.Swap(&other->observation_);
  legal_actions_.UnsafeArenaSwap(&other->legal_actions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PreprocessRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PreprocessRequest_descriptor_;
  metadata.reflection = PreprocessRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PreprocessRequest

// optional .GameOrigin game_origin = 1;
bool PreprocessRequest::has_game_origin() const {
  return !_is_default_instance_ && game_origin_ != NULL;
}
void PreprocessRequest::clear_game_origin() {
  if (GetArenaNoVirtual() == NULL && game_origin_ != NULL) delete game_origin_;
  game_origin_ = NULL;
}
const ::GameOrigin& PreprocessRequest::game_origin() const {
  // @@protoc_insertion_point(field_get:PreprocessRequest.game_origin)
  return game_origin_ != NULL ? *game_origin_ : *default_instance_->game_origin_;
}
::GameOrigin* PreprocessRequest::mutable_game_origin() {
  
  if (game_origin_ == NULL) {
    game_origin_ = new ::GameOrigin;
  }
  // @@protoc_insertion_point(field_mutable:PreprocessRequest.game_origin)
  return game_origin_;
}
::GameOrigin* PreprocessRequest::release_game_origin() {
  // @@protoc_insertion_point(field_release:PreprocessRequest.game_origin)
  
  ::GameOrigin* temp = game_origin_;
  game_origin_ = NULL;
  return temp;
}
void PreprocessRequest::set_allocated_game_origin(::GameOrigin* game_origin) {
  delete game_origin_;
  game_origin_ = game_origin;
  if (game_origin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PreprocessRequest.game_origin)
}

// optional bytes observation = 2;
void PreprocessRequest::clear_observation() {
  observation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PreprocessRequest::observation() const {
  // @@protoc_insertion_point(field_get:PreprocessRequest.observation)
  return observation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PreprocessRequest::set_observation(const ::std::string& value) {
  
  observation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PreprocessRequest.observation)
}
 void PreprocessRequest::set_observation(const char* value) {
  
  observation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PreprocessRequest.observation)
}
 void PreprocessRequest::set_observation(const void* value, size_t size) {
  
  observation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PreprocessRequest.observation)
}
 ::std::string* PreprocessRequest::mutable_observation() {
  
  // @@protoc_insertion_point(field_mutable:PreprocessRequest.observation)
  return observation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PreprocessRequest::release_observation() {
  // @@protoc_insertion_point(field_release:PreprocessRequest.observation)
  
  return observation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PreprocessRequest::set_allocated_observation(::std::string* observation) {
  if (observation != NULL) {
    
  } else {
    
  }
  observation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), observation);
  // @@protoc_insertion_point(field_set_allocated:PreprocessRequest.observation)
}

// repeated int32 legal_actions = 3;
int PreprocessRequest::legal_actions_size() const {
  return legal_actions_.size();
}
void PreprocessRequest::clear_legal_actions() {
  legal_actions_.Clear();
}
 ::google::protobuf::int32 PreprocessRequest::legal_actions(int index) const {
  // @@protoc_insertion_point(field_get:PreprocessRequest.legal_actions)
  return legal_actions_.Get(index);
}
 void PreprocessRequest::set_legal_actions(int index, ::google::protobuf::int32 value) {
  legal_actions_.Set(index, value);
  // @@protoc_insertion_point(field_set:PreprocessRequest.legal_actions)
}
 void PreprocessRequest::add_legal_actions(::google::protobuf::int32 value) {
  legal_actions_.Add(value);
  // @@protoc_insertion_point(field_add:PreprocessRequest.legal_actions)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PreprocessRequest::legal_actions() const {
  // @@protoc_insertion_point(field_list:PreprocessRequest.legal_actions)
  return legal_actions_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PreprocessRequest::mutable_legal_actions() {
  // @@protoc_insertion_point(field_mutable_list:PreprocessRequest.legal_actions)
  return &legal_actions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchRequest::kGameOriginFieldNumber;
const int SearchRequest::kStateFieldNumber;
const int SearchRequest::kLegalActionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchRequest::SearchRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SearchRequest)
}

void SearchRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  game_origin_ = const_cast< ::GameOrigin*>(&::GameOrigin::default_instance());
}

SearchRequest::SearchRequest(const SearchRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SearchRequest)
}

void SearchRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  game_origin_ = NULL;
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SearchRequest::~SearchRequest() {
  // @@protoc_insertion_point(destructor:SearchRequest)
  SharedDtor();
}

void SearchRequest::SharedDtor() {
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete game_origin_;
  }
}

void SearchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchRequest_descriptor_;
}

const SearchRequest& SearchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_czf_2eproto();
  return *default_instance_;
}

SearchRequest* SearchRequest::default_instance_ = NULL;

SearchRequest* SearchRequest::New(::google::protobuf::Arena* arena) const {
  SearchRequest* n = new SearchRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SearchRequest)
  if (GetArenaNoVirtual() == NULL && game_origin_ != NULL) delete game_origin_;
  game_origin_ = NULL;
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  legal_actions_.Clear();
}

bool SearchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SearchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GameOrigin game_origin = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }

      // optional bytes state = 2;
      case 2: {
        if (tag == 18) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_legal_actions;
        break;
      }

      // repeated int32 legal_actions = 3;
      case 3: {
        if (tag == 26) {
         parse_legal_actions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_legal_actions())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_legal_actions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SearchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SearchRequest)
  return false;
#undef DO_
}

void SearchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SearchRequest)
  // optional .GameOrigin game_origin = 1;
  if (this->has_game_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->game_origin_, output);
  }

  // optional bytes state = 2;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->state(), output);
  }

  // repeated int32 legal_actions = 3;
  if (this->legal_actions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_legal_actions_cached_byte_size_);
  }
  for (int i = 0; i < this->legal_actions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->legal_actions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SearchRequest)
}

::google::protobuf::uint8* SearchRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SearchRequest)
  // optional .GameOrigin game_origin = 1;
  if (this->has_game_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->game_origin_, false, target);
  }

  // optional bytes state = 2;
  if (this->state().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->state(), target);
  }

  // repeated int32 legal_actions = 3;
  if (this->legal_actions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _legal_actions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->legal_actions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->legal_actions(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SearchRequest)
  return target;
}

int SearchRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SearchRequest)
  int total_size = 0;

  // optional .GameOrigin game_origin = 1;
  if (this->has_game_origin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->game_origin_);
  }

  // optional bytes state = 2;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->state());
  }

  // repeated int32 legal_actions = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->legal_actions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->legal_actions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _legal_actions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SearchRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SearchRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SearchRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SearchRequest)
    MergeFrom(*source);
  }
}

void SearchRequest::MergeFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SearchRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  legal_actions_.MergeFrom(from.legal_actions_);
  if (from.has_game_origin()) {
    mutable_game_origin()->::GameOrigin::MergeFrom(from.game_origin());
  }
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
}

void SearchRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchRequest::CopyFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequest::IsInitialized() const {

  return true;
}

void SearchRequest::Swap(SearchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchRequest::InternalSwap(SearchRequest* other) {
  std::swap(game_origin_, other->game_origin_);
  state_.Swap(&other->state_);
  legal_actions_.UnsafeArenaSwap(&other->legal_actions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchRequest_descriptor_;
  metadata.reflection = SearchRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchRequest

// optional .GameOrigin game_origin = 1;
bool SearchRequest::has_game_origin() const {
  return !_is_default_instance_ && game_origin_ != NULL;
}
void SearchRequest::clear_game_origin() {
  if (GetArenaNoVirtual() == NULL && game_origin_ != NULL) delete game_origin_;
  game_origin_ = NULL;
}
const ::GameOrigin& SearchRequest::game_origin() const {
  // @@protoc_insertion_point(field_get:SearchRequest.game_origin)
  return game_origin_ != NULL ? *game_origin_ : *default_instance_->game_origin_;
}
::GameOrigin* SearchRequest::mutable_game_origin() {
  
  if (game_origin_ == NULL) {
    game_origin_ = new ::GameOrigin;
  }
  // @@protoc_insertion_point(field_mutable:SearchRequest.game_origin)
  return game_origin_;
}
::GameOrigin* SearchRequest::release_game_origin() {
  // @@protoc_insertion_point(field_release:SearchRequest.game_origin)
  
  ::GameOrigin* temp = game_origin_;
  game_origin_ = NULL;
  return temp;
}
void SearchRequest::set_allocated_game_origin(::GameOrigin* game_origin) {
  delete game_origin_;
  game_origin_ = game_origin;
  if (game_origin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SearchRequest.game_origin)
}

// optional bytes state = 2;
void SearchRequest::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SearchRequest::state() const {
  // @@protoc_insertion_point(field_get:SearchRequest.state)
  return state_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SearchRequest::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SearchRequest.state)
}
 void SearchRequest::set_state(const char* value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SearchRequest.state)
}
 void SearchRequest::set_state(const void* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SearchRequest.state)
}
 ::std::string* SearchRequest::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:SearchRequest.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SearchRequest::release_state() {
  // @@protoc_insertion_point(field_release:SearchRequest.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SearchRequest::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:SearchRequest.state)
}

// repeated int32 legal_actions = 3;
int SearchRequest::legal_actions_size() const {
  return legal_actions_.size();
}
void SearchRequest::clear_legal_actions() {
  legal_actions_.Clear();
}
 ::google::protobuf::int32 SearchRequest::legal_actions(int index) const {
  // @@protoc_insertion_point(field_get:SearchRequest.legal_actions)
  return legal_actions_.Get(index);
}
 void SearchRequest::set_legal_actions(int index, ::google::protobuf::int32 value) {
  legal_actions_.Set(index, value);
  // @@protoc_insertion_point(field_set:SearchRequest.legal_actions)
}
 void SearchRequest::add_legal_actions(::google::protobuf::int32 value) {
  legal_actions_.Add(value);
  // @@protoc_insertion_point(field_add:SearchRequest.legal_actions)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SearchRequest::legal_actions() const {
  // @@protoc_insertion_point(field_list:SearchRequest.legal_actions)
  return legal_actions_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SearchRequest::mutable_legal_actions() {
  // @@protoc_insertion_point(field_mutable_list:SearchRequest.legal_actions)
  return &legal_actions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchResponse::kGameOriginFieldNumber;
const int SearchResponse::kMctsRootsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchResponse::SearchResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SearchResponse)
}

void SearchResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  game_origin_ = const_cast< ::GameOrigin*>(&::GameOrigin::default_instance());
}

SearchResponse::SearchResponse(const SearchResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SearchResponse)
}

void SearchResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  game_origin_ = NULL;
}

SearchResponse::~SearchResponse() {
  // @@protoc_insertion_point(destructor:SearchResponse)
  SharedDtor();
}

void SearchResponse::SharedDtor() {
  if (this != default_instance_) {
    delete game_origin_;
  }
}

void SearchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchResponse_descriptor_;
}

const SearchResponse& SearchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_czf_2eproto();
  return *default_instance_;
}

SearchResponse* SearchResponse::default_instance_ = NULL;

SearchResponse* SearchResponse::New(::google::protobuf::Arena* arena) const {
  SearchResponse* n = new SearchResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SearchResponse)
  if (GetArenaNoVirtual() == NULL && game_origin_ != NULL) delete game_origin_;
  game_origin_ = NULL;
  mcts_roots_.Clear();
}

bool SearchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SearchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GameOrigin game_origin = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mcts_roots;
        break;
      }

      // repeated .MCTSRoot mcts_roots = 2;
      case 2: {
        if (tag == 18) {
         parse_mcts_roots:
          DO_(input->IncrementRecursionDepth());
         parse_loop_mcts_roots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mcts_roots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_mcts_roots;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SearchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SearchResponse)
  return false;
#undef DO_
}

void SearchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SearchResponse)
  // optional .GameOrigin game_origin = 1;
  if (this->has_game_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->game_origin_, output);
  }

  // repeated .MCTSRoot mcts_roots = 2;
  for (unsigned int i = 0, n = this->mcts_roots_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mcts_roots(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SearchResponse)
}

::google::protobuf::uint8* SearchResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SearchResponse)
  // optional .GameOrigin game_origin = 1;
  if (this->has_game_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->game_origin_, false, target);
  }

  // repeated .MCTSRoot mcts_roots = 2;
  for (unsigned int i = 0, n = this->mcts_roots_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->mcts_roots(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SearchResponse)
  return target;
}

int SearchResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SearchResponse)
  int total_size = 0;

  // optional .GameOrigin game_origin = 1;
  if (this->has_game_origin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->game_origin_);
  }

  // repeated .MCTSRoot mcts_roots = 2;
  total_size += 1 * this->mcts_roots_size();
  for (int i = 0; i < this->mcts_roots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mcts_roots(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SearchResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SearchResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SearchResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SearchResponse)
    MergeFrom(*source);
  }
}

void SearchResponse::MergeFrom(const SearchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SearchResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  mcts_roots_.MergeFrom(from.mcts_roots_);
  if (from.has_game_origin()) {
    mutable_game_origin()->::GameOrigin::MergeFrom(from.game_origin());
  }
}

void SearchResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResponse::CopyFrom(const SearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResponse::IsInitialized() const {

  return true;
}

void SearchResponse::Swap(SearchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchResponse::InternalSwap(SearchResponse* other) {
  std::swap(game_origin_, other->game_origin_);
  mcts_roots_.UnsafeArenaSwap(&other->mcts_roots_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchResponse_descriptor_;
  metadata.reflection = SearchResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchResponse

// optional .GameOrigin game_origin = 1;
bool SearchResponse::has_game_origin() const {
  return !_is_default_instance_ && game_origin_ != NULL;
}
void SearchResponse::clear_game_origin() {
  if (GetArenaNoVirtual() == NULL && game_origin_ != NULL) delete game_origin_;
  game_origin_ = NULL;
}
const ::GameOrigin& SearchResponse::game_origin() const {
  // @@protoc_insertion_point(field_get:SearchResponse.game_origin)
  return game_origin_ != NULL ? *game_origin_ : *default_instance_->game_origin_;
}
::GameOrigin* SearchResponse::mutable_game_origin() {
  
  if (game_origin_ == NULL) {
    game_origin_ = new ::GameOrigin;
  }
  // @@protoc_insertion_point(field_mutable:SearchResponse.game_origin)
  return game_origin_;
}
::GameOrigin* SearchResponse::release_game_origin() {
  // @@protoc_insertion_point(field_release:SearchResponse.game_origin)
  
  ::GameOrigin* temp = game_origin_;
  game_origin_ = NULL;
  return temp;
}
void SearchResponse::set_allocated_game_origin(::GameOrigin* game_origin) {
  delete game_origin_;
  game_origin_ = game_origin;
  if (game_origin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SearchResponse.game_origin)
}

// repeated .MCTSRoot mcts_roots = 2;
int SearchResponse::mcts_roots_size() const {
  return mcts_roots_.size();
}
void SearchResponse::clear_mcts_roots() {
  mcts_roots_.Clear();
}
const ::MCTSRoot& SearchResponse::mcts_roots(int index) const {
  // @@protoc_insertion_point(field_get:SearchResponse.mcts_roots)
  return mcts_roots_.Get(index);
}
::MCTSRoot* SearchResponse::mutable_mcts_roots(int index) {
  // @@protoc_insertion_point(field_mutable:SearchResponse.mcts_roots)
  return mcts_roots_.Mutable(index);
}
::MCTSRoot* SearchResponse::add_mcts_roots() {
  // @@protoc_insertion_point(field_add:SearchResponse.mcts_roots)
  return mcts_roots_.Add();
}
::google::protobuf::RepeatedPtrField< ::MCTSRoot >*
SearchResponse::mutable_mcts_roots() {
  // @@protoc_insertion_point(field_mutable_list:SearchResponse.mcts_roots)
  return &mcts_roots_;
}
const ::google::protobuf::RepeatedPtrField< ::MCTSRoot >&
SearchResponse::mcts_roots() const {
  // @@protoc_insertion_point(field_list:SearchResponse.mcts_roots)
  return mcts_roots_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trajectory::kActionsFieldNumber;
const int Trajectory::kRewardsFieldNumber;
const int Trajectory::kMctsRootsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trajectory::Trajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Trajectory)
}

void Trajectory::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Trajectory::Trajectory(const Trajectory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Trajectory)
}

void Trajectory::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Trajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trajectory_descriptor_;
}

const Trajectory& Trajectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_czf_2eproto();
  return *default_instance_;
}

Trajectory* Trajectory::default_instance_ = NULL;

Trajectory* Trajectory::New(::google::protobuf::Arena* arena) const {
  Trajectory* n = new Trajectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:Trajectory)
  actions_.Clear();
  rewards_.Clear();
  mcts_roots_.Clear();
}

bool Trajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Trajectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 actions = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_actions())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_actions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rewards;
        break;
      }

      // repeated float rewards = 2;
      case 2: {
        if (tag == 18) {
         parse_rewards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_rewards())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_rewards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mcts_roots;
        break;
      }

      // repeated .MCTSRoot mcts_roots = 3;
      case 3: {
        if (tag == 26) {
         parse_mcts_roots:
          DO_(input->IncrementRecursionDepth());
         parse_loop_mcts_roots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mcts_roots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_mcts_roots;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Trajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Trajectory)
  return false;
#undef DO_
}

void Trajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Trajectory)
  // repeated int32 actions = 1;
  if (this->actions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_actions_cached_byte_size_);
  }
  for (int i = 0; i < this->actions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->actions(i), output);
  }

  // repeated float rewards = 2;
  if (this->rewards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rewards_cached_byte_size_);
  }
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->rewards(i), output);
  }

  // repeated .MCTSRoot mcts_roots = 3;
  for (unsigned int i = 0, n = this->mcts_roots_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mcts_roots(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Trajectory)
}

::google::protobuf::uint8* Trajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Trajectory)
  // repeated int32 actions = 1;
  if (this->actions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _actions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->actions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->actions(i), target);
  }

  // repeated float rewards = 2;
  if (this->rewards_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _rewards_cached_byte_size_, target);
  }
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->rewards(i), target);
  }

  // repeated .MCTSRoot mcts_roots = 3;
  for (unsigned int i = 0, n = this->mcts_roots_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->mcts_roots(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Trajectory)
  return target;
}

int Trajectory::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Trajectory)
  int total_size = 0;

  // repeated int32 actions = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->actions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->actions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _actions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float rewards = 2;
  {
    int data_size = 0;
    data_size = 4 * this->rewards_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rewards_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .MCTSRoot mcts_roots = 3;
  total_size += 1 * this->mcts_roots_size();
  for (int i = 0; i < this->mcts_roots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mcts_roots(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Trajectory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Trajectory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Trajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Trajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Trajectory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  actions_.MergeFrom(from.actions_);
  rewards_.MergeFrom(from.rewards_);
  mcts_roots_.MergeFrom(from.mcts_roots_);
}

void Trajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {

  return true;
}

void Trajectory::Swap(Trajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trajectory::InternalSwap(Trajectory* other) {
  actions_.UnsafeArenaSwap(&other->actions_);
  rewards_.UnsafeArenaSwap(&other->rewards_);
  mcts_roots_.UnsafeArenaSwap(&other->mcts_roots_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trajectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trajectory_descriptor_;
  metadata.reflection = Trajectory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Trajectory

// repeated int32 actions = 1;
int Trajectory::actions_size() const {
  return actions_.size();
}
void Trajectory::clear_actions() {
  actions_.Clear();
}
 ::google::protobuf::int32 Trajectory::actions(int index) const {
  // @@protoc_insertion_point(field_get:Trajectory.actions)
  return actions_.Get(index);
}
 void Trajectory::set_actions(int index, ::google::protobuf::int32 value) {
  actions_.Set(index, value);
  // @@protoc_insertion_point(field_set:Trajectory.actions)
}
 void Trajectory::add_actions(::google::protobuf::int32 value) {
  actions_.Add(value);
  // @@protoc_insertion_point(field_add:Trajectory.actions)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Trajectory::actions() const {
  // @@protoc_insertion_point(field_list:Trajectory.actions)
  return actions_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Trajectory::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:Trajectory.actions)
  return &actions_;
}

// repeated float rewards = 2;
int Trajectory::rewards_size() const {
  return rewards_.size();
}
void Trajectory::clear_rewards() {
  rewards_.Clear();
}
 float Trajectory::rewards(int index) const {
  // @@protoc_insertion_point(field_get:Trajectory.rewards)
  return rewards_.Get(index);
}
 void Trajectory::set_rewards(int index, float value) {
  rewards_.Set(index, value);
  // @@protoc_insertion_point(field_set:Trajectory.rewards)
}
 void Trajectory::add_rewards(float value) {
  rewards_.Add(value);
  // @@protoc_insertion_point(field_add:Trajectory.rewards)
}
 const ::google::protobuf::RepeatedField< float >&
Trajectory::rewards() const {
  // @@protoc_insertion_point(field_list:Trajectory.rewards)
  return rewards_;
}
 ::google::protobuf::RepeatedField< float >*
Trajectory::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_list:Trajectory.rewards)
  return &rewards_;
}

// repeated .MCTSRoot mcts_roots = 3;
int Trajectory::mcts_roots_size() const {
  return mcts_roots_.size();
}
void Trajectory::clear_mcts_roots() {
  mcts_roots_.Clear();
}
const ::MCTSRoot& Trajectory::mcts_roots(int index) const {
  // @@protoc_insertion_point(field_get:Trajectory.mcts_roots)
  return mcts_roots_.Get(index);
}
::MCTSRoot* Trajectory::mutable_mcts_roots(int index) {
  // @@protoc_insertion_point(field_mutable:Trajectory.mcts_roots)
  return mcts_roots_.Mutable(index);
}
::MCTSRoot* Trajectory::add_mcts_roots() {
  // @@protoc_insertion_point(field_add:Trajectory.mcts_roots)
  return mcts_roots_.Add();
}
::google::protobuf::RepeatedPtrField< ::MCTSRoot >*
Trajectory::mutable_mcts_roots() {
  // @@protoc_insertion_point(field_mutable_list:Trajectory.mcts_roots)
  return &mcts_roots_;
}
const ::google::protobuf::RepeatedPtrField< ::MCTSRoot >&
Trajectory::mcts_roots() const {
  // @@protoc_insertion_point(field_list:Trajectory.mcts_roots)
  return mcts_roots_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Packet::kHeartbeatFieldNumber;
const int Packet::kJobRequestFieldNumber;
const int Packet::kPreprocessRequestFieldNumber;
const int Packet::kSearchRequestFieldNumber;
const int Packet::kSearchResponseFieldNumber;
const int Packet::kModelFieldNumber;
const int Packet::kTrajectoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Packet::Packet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Packet)
}

void Packet::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Packet_default_oneof_instance_->heartbeat_ = const_cast< ::Heartbeat*>(&::Heartbeat::default_instance());
  Packet_default_oneof_instance_->job_request_ = const_cast< ::JobRequest*>(&::JobRequest::default_instance());
  Packet_default_oneof_instance_->preprocess_request_ = const_cast< ::PreprocessRequest*>(&::PreprocessRequest::default_instance());
  Packet_default_oneof_instance_->search_request_ = const_cast< ::SearchRequest*>(&::SearchRequest::default_instance());
  Packet_default_oneof_instance_->search_response_ = const_cast< ::SearchResponse*>(&::SearchResponse::default_instance());
  Packet_default_oneof_instance_->model_ = const_cast< ::Model*>(&::Model::default_instance());
  Packet_default_oneof_instance_->trajectory_ = const_cast< ::Trajectory*>(&::Trajectory::default_instance());
}

Packet::Packet(const Packet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Packet)
}

void Packet::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_payload();
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
  if (this != default_instance_) {
  }
}

void Packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_descriptor_;
}

const Packet& Packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_czf_2eproto();
  return *default_instance_;
}

Packet* Packet::default_instance_ = NULL;

Packet* Packet::New(::google::protobuf::Arena* arena) const {
  Packet* n = new Packet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Packet::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:Packet)
  switch(payload_case()) {
    case kHeartbeat: {
      delete payload_.heartbeat_;
      break;
    }
    case kJobRequest: {
      delete payload_.job_request_;
      break;
    }
    case kPreprocessRequest: {
      delete payload_.preprocess_request_;
      break;
    }
    case kSearchRequest: {
      delete payload_.search_request_;
      break;
    }
    case kSearchResponse: {
      delete payload_.search_response_;
      break;
    }
    case kModel: {
      delete payload_.model_;
      break;
    }
    case kTrajectory: {
      delete payload_.trajectory_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:Packet)
  clear_payload();
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Packet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Heartbeat heartbeat = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_job_request;
        break;
      }

      // optional .JobRequest job_request = 2;
      case 2: {
        if (tag == 18) {
         parse_job_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_preprocess_request;
        break;
      }

      // optional .PreprocessRequest preprocess_request = 3;
      case 3: {
        if (tag == 26) {
         parse_preprocess_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preprocess_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_search_request;
        break;
      }

      // optional .SearchRequest search_request = 4;
      case 4: {
        if (tag == 34) {
         parse_search_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_search_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_search_response;
        break;
      }

      // optional .SearchResponse search_response = 5;
      case 5: {
        if (tag == 42) {
         parse_search_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_search_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_model;
        break;
      }

      // optional .Model model = 6;
      case 6: {
        if (tag == 50) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_trajectory;
        break;
      }

      // optional .Trajectory trajectory = 7;
      case 7: {
        if (tag == 58) {
         parse_trajectory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Packet)
  return false;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Packet)
  // optional .Heartbeat heartbeat = 1;
  if (has_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *payload_.heartbeat_, output);
  }

  // optional .JobRequest job_request = 2;
  if (has_job_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *payload_.job_request_, output);
  }

  // optional .PreprocessRequest preprocess_request = 3;
  if (has_preprocess_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *payload_.preprocess_request_, output);
  }

  // optional .SearchRequest search_request = 4;
  if (has_search_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *payload_.search_request_, output);
  }

  // optional .SearchResponse search_response = 5;
  if (has_search_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *payload_.search_response_, output);
  }

  // optional .Model model = 6;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *payload_.model_, output);
  }

  // optional .Trajectory trajectory = 7;
  if (has_trajectory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *payload_.trajectory_, output);
  }

  // @@protoc_insertion_point(serialize_end:Packet)
}

::google::protobuf::uint8* Packet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Packet)
  // optional .Heartbeat heartbeat = 1;
  if (has_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *payload_.heartbeat_, false, target);
  }

  // optional .JobRequest job_request = 2;
  if (has_job_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *payload_.job_request_, false, target);
  }

  // optional .PreprocessRequest preprocess_request = 3;
  if (has_preprocess_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *payload_.preprocess_request_, false, target);
  }

  // optional .SearchRequest search_request = 4;
  if (has_search_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *payload_.search_request_, false, target);
  }

  // optional .SearchResponse search_response = 5;
  if (has_search_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *payload_.search_response_, false, target);
  }

  // optional .Model model = 6;
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *payload_.model_, false, target);
  }

  // optional .Trajectory trajectory = 7;
  if (has_trajectory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *payload_.trajectory_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Packet)
  return target;
}

int Packet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Packet)
  int total_size = 0;

  switch (payload_case()) {
    // optional .Heartbeat heartbeat = 1;
    case kHeartbeat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.heartbeat_);
      break;
    }
    // optional .JobRequest job_request = 2;
    case kJobRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.job_request_);
      break;
    }
    // optional .PreprocessRequest preprocess_request = 3;
    case kPreprocessRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.preprocess_request_);
      break;
    }
    // optional .SearchRequest search_request = 4;
    case kSearchRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.search_request_);
      break;
    }
    // optional .SearchResponse search_response = 5;
    case kSearchResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.search_response_);
      break;
    }
    // optional .Model model = 6;
    case kModel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.model_);
      break;
    }
    // optional .Trajectory trajectory = 7;
    case kTrajectory: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.trajectory_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Packet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Packet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Packet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Packet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Packet)
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Packet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.payload_case()) {
    case kHeartbeat: {
      mutable_heartbeat()->::Heartbeat::MergeFrom(from.heartbeat());
      break;
    }
    case kJobRequest: {
      mutable_job_request()->::JobRequest::MergeFrom(from.job_request());
      break;
    }
    case kPreprocessRequest: {
      mutable_preprocess_request()->::PreprocessRequest::MergeFrom(from.preprocess_request());
      break;
    }
    case kSearchRequest: {
      mutable_search_request()->::SearchRequest::MergeFrom(from.search_request());
      break;
    }
    case kSearchResponse: {
      mutable_search_response()->::SearchResponse::MergeFrom(from.search_response());
      break;
    }
    case kModel: {
      mutable_model()->::Model::MergeFrom(from.model());
      break;
    }
    case kTrajectory: {
      mutable_trajectory()->::Trajectory::MergeFrom(from.trajectory());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Packet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {

  return true;
}

void Packet::Swap(Packet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Packet::InternalSwap(Packet* other) {
  std::swap(payload_, other->payload_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_descriptor_;
  metadata.reflection = Packet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Packet

// optional .Heartbeat heartbeat = 1;
bool Packet::has_heartbeat() const {
  return payload_case() == kHeartbeat;
}
void Packet::set_has_heartbeat() {
  _oneof_case_[0] = kHeartbeat;
}
void Packet::clear_heartbeat() {
  if (has_heartbeat()) {
    delete payload_.heartbeat_;
    clear_has_payload();
  }
}
 const ::Heartbeat& Packet::heartbeat() const {
  // @@protoc_insertion_point(field_get:Packet.heartbeat)
  return has_heartbeat()
      ? *payload_.heartbeat_
      : ::Heartbeat::default_instance();
}
::Heartbeat* Packet::mutable_heartbeat() {
  if (!has_heartbeat()) {
    clear_payload();
    set_has_heartbeat();
    payload_.heartbeat_ = new ::Heartbeat;
  }
  // @@protoc_insertion_point(field_mutable:Packet.heartbeat)
  return payload_.heartbeat_;
}
::Heartbeat* Packet::release_heartbeat() {
  // @@protoc_insertion_point(field_release:Packet.heartbeat)
  if (has_heartbeat()) {
    clear_has_payload();
    ::Heartbeat* temp = payload_.heartbeat_;
    payload_.heartbeat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Packet::set_allocated_heartbeat(::Heartbeat* heartbeat) {
  clear_payload();
  if (heartbeat) {
    set_has_heartbeat();
    payload_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.heartbeat)
}

// optional .JobRequest job_request = 2;
bool Packet::has_job_request() const {
  return payload_case() == kJobRequest;
}
void Packet::set_has_job_request() {
  _oneof_case_[0] = kJobRequest;
}
void Packet::clear_job_request() {
  if (has_job_request()) {
    delete payload_.job_request_;
    clear_has_payload();
  }
}
 const ::JobRequest& Packet::job_request() const {
  // @@protoc_insertion_point(field_get:Packet.job_request)
  return has_job_request()
      ? *payload_.job_request_
      : ::JobRequest::default_instance();
}
::JobRequest* Packet::mutable_job_request() {
  if (!has_job_request()) {
    clear_payload();
    set_has_job_request();
    payload_.job_request_ = new ::JobRequest;
  }
  // @@protoc_insertion_point(field_mutable:Packet.job_request)
  return payload_.job_request_;
}
::JobRequest* Packet::release_job_request() {
  // @@protoc_insertion_point(field_release:Packet.job_request)
  if (has_job_request()) {
    clear_has_payload();
    ::JobRequest* temp = payload_.job_request_;
    payload_.job_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Packet::set_allocated_job_request(::JobRequest* job_request) {
  clear_payload();
  if (job_request) {
    set_has_job_request();
    payload_.job_request_ = job_request;
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.job_request)
}

// optional .PreprocessRequest preprocess_request = 3;
bool Packet::has_preprocess_request() const {
  return payload_case() == kPreprocessRequest;
}
void Packet::set_has_preprocess_request() {
  _oneof_case_[0] = kPreprocessRequest;
}
void Packet::clear_preprocess_request() {
  if (has_preprocess_request()) {
    delete payload_.preprocess_request_;
    clear_has_payload();
  }
}
 const ::PreprocessRequest& Packet::preprocess_request() const {
  // @@protoc_insertion_point(field_get:Packet.preprocess_request)
  return has_preprocess_request()
      ? *payload_.preprocess_request_
      : ::PreprocessRequest::default_instance();
}
::PreprocessRequest* Packet::mutable_preprocess_request() {
  if (!has_preprocess_request()) {
    clear_payload();
    set_has_preprocess_request();
    payload_.preprocess_request_ = new ::PreprocessRequest;
  }
  // @@protoc_insertion_point(field_mutable:Packet.preprocess_request)
  return payload_.preprocess_request_;
}
::PreprocessRequest* Packet::release_preprocess_request() {
  // @@protoc_insertion_point(field_release:Packet.preprocess_request)
  if (has_preprocess_request()) {
    clear_has_payload();
    ::PreprocessRequest* temp = payload_.preprocess_request_;
    payload_.preprocess_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Packet::set_allocated_preprocess_request(::PreprocessRequest* preprocess_request) {
  clear_payload();
  if (preprocess_request) {
    set_has_preprocess_request();
    payload_.preprocess_request_ = preprocess_request;
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.preprocess_request)
}

// optional .SearchRequest search_request = 4;
bool Packet::has_search_request() const {
  return payload_case() == kSearchRequest;
}
void Packet::set_has_search_request() {
  _oneof_case_[0] = kSearchRequest;
}
void Packet::clear_search_request() {
  if (has_search_request()) {
    delete payload_.search_request_;
    clear_has_payload();
  }
}
 const ::SearchRequest& Packet::search_request() const {
  // @@protoc_insertion_point(field_get:Packet.search_request)
  return has_search_request()
      ? *payload_.search_request_
      : ::SearchRequest::default_instance();
}
::SearchRequest* Packet::mutable_search_request() {
  if (!has_search_request()) {
    clear_payload();
    set_has_search_request();
    payload_.search_request_ = new ::SearchRequest;
  }
  // @@protoc_insertion_point(field_mutable:Packet.search_request)
  return payload_.search_request_;
}
::SearchRequest* Packet::release_search_request() {
  // @@protoc_insertion_point(field_release:Packet.search_request)
  if (has_search_request()) {
    clear_has_payload();
    ::SearchRequest* temp = payload_.search_request_;
    payload_.search_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Packet::set_allocated_search_request(::SearchRequest* search_request) {
  clear_payload();
  if (search_request) {
    set_has_search_request();
    payload_.search_request_ = search_request;
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.search_request)
}

// optional .SearchResponse search_response = 5;
bool Packet::has_search_response() const {
  return payload_case() == kSearchResponse;
}
void Packet::set_has_search_response() {
  _oneof_case_[0] = kSearchResponse;
}
void Packet::clear_search_response() {
  if (has_search_response()) {
    delete payload_.search_response_;
    clear_has_payload();
  }
}
 const ::SearchResponse& Packet::search_response() const {
  // @@protoc_insertion_point(field_get:Packet.search_response)
  return has_search_response()
      ? *payload_.search_response_
      : ::SearchResponse::default_instance();
}
::SearchResponse* Packet::mutable_search_response() {
  if (!has_search_response()) {
    clear_payload();
    set_has_search_response();
    payload_.search_response_ = new ::SearchResponse;
  }
  // @@protoc_insertion_point(field_mutable:Packet.search_response)
  return payload_.search_response_;
}
::SearchResponse* Packet::release_search_response() {
  // @@protoc_insertion_point(field_release:Packet.search_response)
  if (has_search_response()) {
    clear_has_payload();
    ::SearchResponse* temp = payload_.search_response_;
    payload_.search_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Packet::set_allocated_search_response(::SearchResponse* search_response) {
  clear_payload();
  if (search_response) {
    set_has_search_response();
    payload_.search_response_ = search_response;
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.search_response)
}

// optional .Model model = 6;
bool Packet::has_model() const {
  return payload_case() == kModel;
}
void Packet::set_has_model() {
  _oneof_case_[0] = kModel;
}
void Packet::clear_model() {
  if (has_model()) {
    delete payload_.model_;
    clear_has_payload();
  }
}
 const ::Model& Packet::model() const {
  // @@protoc_insertion_point(field_get:Packet.model)
  return has_model()
      ? *payload_.model_
      : ::Model::default_instance();
}
::Model* Packet::mutable_model() {
  if (!has_model()) {
    clear_payload();
    set_has_model();
    payload_.model_ = new ::Model;
  }
  // @@protoc_insertion_point(field_mutable:Packet.model)
  return payload_.model_;
}
::Model* Packet::release_model() {
  // @@protoc_insertion_point(field_release:Packet.model)
  if (has_model()) {
    clear_has_payload();
    ::Model* temp = payload_.model_;
    payload_.model_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Packet::set_allocated_model(::Model* model) {
  clear_payload();
  if (model) {
    set_has_model();
    payload_.model_ = model;
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.model)
}

// optional .Trajectory trajectory = 7;
bool Packet::has_trajectory() const {
  return payload_case() == kTrajectory;
}
void Packet::set_has_trajectory() {
  _oneof_case_[0] = kTrajectory;
}
void Packet::clear_trajectory() {
  if (has_trajectory()) {
    delete payload_.trajectory_;
    clear_has_payload();
  }
}
 const ::Trajectory& Packet::trajectory() const {
  // @@protoc_insertion_point(field_get:Packet.trajectory)
  return has_trajectory()
      ? *payload_.trajectory_
      : ::Trajectory::default_instance();
}
::Trajectory* Packet::mutable_trajectory() {
  if (!has_trajectory()) {
    clear_payload();
    set_has_trajectory();
    payload_.trajectory_ = new ::Trajectory;
  }
  // @@protoc_insertion_point(field_mutable:Packet.trajectory)
  return payload_.trajectory_;
}
::Trajectory* Packet::release_trajectory() {
  // @@protoc_insertion_point(field_release:Packet.trajectory)
  if (has_trajectory()) {
    clear_has_payload();
    ::Trajectory* temp = payload_.trajectory_;
    payload_.trajectory_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Packet::set_allocated_trajectory(::Trajectory* trajectory) {
  clear_payload();
  if (trajectory) {
    set_has_trajectory();
    payload_.trajectory_ = trajectory;
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.trajectory)
}

bool Packet::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
void Packet::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
Packet::PayloadCase Packet::payload_case() const {
  return Packet::PayloadCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
