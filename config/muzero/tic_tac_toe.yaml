algorithm: 'MuZero'

game:
  name: 'tic_tac_toe'
  num_player: 2
  # number of total actions
  actions: 9
  # if frame_stack equals to 0, then
  #   observation_shape is [channel, H, W]
  #   feature_shape is [channel, H, W]
  # otherwise,
  #   observation_shape is [frame_stack * (channel + 1), H, W]
  #   feature_shape is [(channel + 1), H, W]
  observation:
    # number of frames to stack
    # for 0, (o_1)
    # for n, (a_1, o_1, ...,  a_n, o_n)
    frame_stack: 0
    # C
    channel: 4
    # [H, W]
    spatial_shape: [3, 3]
  # if a state_spatial_shape is [H, W],
  # then the state_shape is [h_channels, H, W]
  state_spatial_shape: [3, 3]

model:
  name: 'MuZero'
  # h: representation function
  h_blocks: 3
  h_channels: 64
  # g: dynamics function
  g_blocks: 3
  r_heads: 1
  r_loss: 'mse'
  # f: prediction function
  f_blocks: 3
  f_channels: 64
  v_heads: 1
  v_loss: 'mse'

learner:
  # rollout timesteps K
  rollout_steps: 5
  # train the model when there are N newly generated states or sequences (disjoint options)
  # Examples:
  #     states_to_train: 5_000 # train per 5_000 states
  #     sequences_to_train: 25 # train per 25 sequences
  # 200 games * 40 avg_states_per_game
  states_to_train: 4_000

  # sample the replay buffer with a number of the ratio of newly generated states
  # or a fixed number of states (disjoint options)
  # Examples:
  #     sample_ratio: 1
  #     sample_states: 10_000
  sample_ratio: 1

  # sequences_to_train: 100
  # how many states to store in the replay buffer
  # usually equals to (25 * states_to_train) or (25 * sequence * sequences_to_train)
  replay_buffer_size: 100_000
  # whether to enable prioritized experience replay
  prioritized: False
  # how many states to learn from per batch
  batch_size: 1024
  # save a checkpoint every N steps
  checkpoint_freq: 10

  optimizer:
    learning_rate: 0.02
    momentum: 0.9
    weight_decay: 1.e-4
    nesterov: True

mcts:
  # Mcts simulation counts
  simulation_count: 50
  # pUCT exploration constant
  c_puct: 1.25
  # discount factor of the return
  discount_factor: 1.
  # n-step of the return (set `0` to disable)
  nstep: 0
  # default min q value on tree
  tree_min_value: -1
  # default max q value on tree
  tree_max_value: 1
  # root dirichlet noise
  dirichlet:
    # Dir(alpha)
    alpha: .5
    # (1 - epsilon) * policy + epsilon * Dir(alpha);
    epsilon: 0.25

game_server:
  # drop the softmax temperature from 1 to 0 after the number of steps
  # (set `True` to always enable)
  softmax_temperature_step: True
  # send a sequence every length N (set `0` to send full game)
  sequence: 0

evaluator:
  # the first checkpoint to be evaluated
  first_checkpoint: 0
  # the last checkpoint to be evaluated
  last_checkpoint: 1000
  # evaluate performance every N checkpoints
  frequency: 10
  # whether to listen to the latest model
  # if set `True`, `last_checkpoint` is ignored
  latest: True
  # the elo rating for the first checkpoint
  elo_base: 0.
  # the win rate threshold to replace the base model
  # (set `0.` to replace the base model always)
  replace_rate: 0.55
